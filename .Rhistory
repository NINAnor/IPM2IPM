source(file.path(Sys.getenv("WORKSPACE_PAGAN"), "R", "glmNIMBLE.R"))
source(file.path(Sys.getenv("WORKSPACE_PAGAN"), "R", "ipmNIMBLE.R"))
# Define the MCMC parameter
mcmcParams <- list(
numRuns = 1000,
numChains = 4,
numBurnIn = 500,
thinDensity = 1,
predictThinDensity = 1
)
# debug(ipmNIMBLE)
# Import some test data
testData <- read.csv("https://cmerow.github.io/RDataScience/21_assets/Exercises/Intro_to_IPMs_Exercises_Data.csv")
# Run the IPM
ipmOut <- ipmNIMBLE(kernelFunction = NULL, kernelEvalPoints = NULL, inputData = testData, mcmcParams = mcmcParams,
# Define the survival sub-model
surv.modelFormula = cbind(surv, 1 - surv) ~ size, surv.errorFamily = binomial, surv.inputData = testData[!is.na(testData$surv) & !is.na(testData$size), ],
# Define the growth sub-model
growth.modelFormula = sizeNext ~ size, growth.inputData = testData[!is.na(testData$sizeNext) & !is.na(testData$size), ],
# Define the fecundity sub-model
fec.modelFormula = fec.seed ~ size, fec.errorFamily = poisson, fec.inputData = testData[!is.na(testData$fec.seed) & !is.na(testData$size), ]
)
ipmOut$surv$covSummaryStats
as.matrix(ipmOut$surv$covSummaryStats)
testMat <- as.matrix(ipmOut$surv$covSummaryStats)
testMat["joe", "inge"]
all(c("mean", "sd") %in% rownames(cenScaleInfo))
cenScaleInfo <- as.matrix(ipmOut$surv$covSummaryStats)
all(c("mean", "sd") %in% rownames(cenScaleInfo))
ipmOut$surv$deterministicNodeDef
ipmOut$surv$parameterSamples
do.call(rbind, lapply(X = ipmOut$surv$parameterSamples, FUN = as.data.frame))
ipmOut$surv$parameterSamples[[1]]
class(ipmOut$surv$parameterSamples[[1]])
class(ipmOut$surv$parameterSamples)
paramSamples <- do.call(rbind, lapply(X = ipmOut$surv$parameterSamples, FUN = as.data.frame))
head(paramSamples)
library(nimble)
library(DHARMa)
library(ggplot2)
# Import the source files
source(file.path(Sys.getenv("WORKSPACE_PAGAN"), "R", "mcmcInternals.R"))
source(file.path(Sys.getenv("WORKSPACE_PAGAN"), "R", "glmNIMBLE.R"))
source(file.path(Sys.getenv("WORKSPACE_PAGAN"), "R", "ipmNIMBLE.R"))
# Define the MCMC parameter
mcmcParams <- list(
numRuns = 1000,
numChains = 4,
numBurnIn = 500,
thinDensity = 1,
predictThinDensity = 1
)
# debug(ipmNIMBLE)
# Import some test data
testData <- read.csv("https://cmerow.github.io/RDataScience/21_assets/Exercises/Intro_to_IPMs_Exercises_Data.csv")
# Run the IPM
ipmOut <- ipmNIMBLE(kernelFunction = NULL, kernelEvalPoints = NULL, inputData = testData, mcmcParams = mcmcParams,
# Define the survival sub-model
surv.modelFormula = cbind(surv, 1 - surv) ~ size, surv.errorFamily = binomial, surv.inputData = testData[!is.na(testData$surv) & !is.na(testData$size), ],
# Define the growth sub-model
growth.modelFormula = sizeNext ~ size, growth.inputData = testData[!is.na(testData$sizeNext) & !is.na(testData$size), ],
# Define the fecundity sub-model
fec.modelFormula = fec.seed ~ size, fec.errorFamily = poisson, fec.inputData = testData[!is.na(testData$fec.seed) & !is.na(testData$size), ]
)
# Plot the residual test of the sub-models
plot(ipmOut$surv$DHARMaResiduals)
plot(ipmOut$growth$DHARMaResiduals)
plot(ipmOut$fec$DHARMaResiduals)
# Plot the regression coefficients associated with the sub-models
ipmOut$surv$parameterFigure
ipmOut$growth$parameterFigure
ipmOut$fec$parameterFigure
# Create some test data to evaluate the kernel on
testData <- data.frame(size = seq(0.0, 10.0, 0.5))
# Evaluate the growth kernel
growthKern <- function(x, growth, ...) {
x
}
ipmKernelEvaluation(ipmOb, testData, testData$size, growthKern)
debug(ipmKernelEvaluation)
ipmKernelEvaluation(ipmOb, testData, testData$size, growthKern)
impOb
as.list(impOb)
# Import the source files
source(file.path(Sys.getenv("WORKSPACE_PAGAN"), "R", "mcmcInternals.R"))
source(file.path(Sys.getenv("WORKSPACE_PAGAN"), "R", "glmNIMBLE.R"))
source(file.path(Sys.getenv("WORKSPACE_PAGAN"), "R", "ipmNIMBLE.R"))
debug(predict.glmNIMBLE)
debug(ipmKernelEvaluation)
ipmKernelEvaluation(ipmOut, testData, testData$size, growthKern)
testData
ipmOut
ipmKernelEvaluation(ipmOut, testData, testData$size, growthKern)
as.list(impOb)
# Import the source files
source(file.path(Sys.getenv("WORKSPACE_PAGAN"), "R", "mcmcInternals.R"))
source(file.path(Sys.getenv("WORKSPACE_PAGAN"), "R", "glmNIMBLE.R"))
source(file.path(Sys.getenv("WORKSPACE_PAGAN"), "R", "ipmNIMBLE.R"))
debug(predict.glmNIMBLE)
debug(ipmKernelEvaluation)
ipmKernelEvaluation(ipmOut, testData, testData$size, growthKern)
inGLM
inData
curSuffix
source(file.path(Sys.getenv("WORKSPACE_PAGAN"), "R", "glmNIMBLE.R"))
source(file.path(Sys.getenv("WORKSPACE_PAGAN"), "R", "ipmNIMBLE.R"))
debug(predict.glmNIMBLE)
debug(ipmKernelEvaluation)
ipmKernelEvaluation(ipmOut, testData, testData$size, growthKern)
?model.matrix
ipmKernelEvaluation(ipmOut, testData, testData$size, growthKern)
as.character(inModForm)
Reduce(pastem deparse(inModForm))
Reduce(paste, deparse(inModForm))
gsub("^.*~", "~", Reduce(paste, deparse(inModForm)), perl = TRUE)
as.formula(gsub("^.*~", "~", Reduce(paste, deparse(inModForm)), perl = TRUE))
source(file.path(Sys.getenv("WORKSPACE_PAGAN"), "R", "glmNIMBLE.R"))
source(file.path(Sys.getenv("WORKSPACE_PAGAN"), "R", "ipmNIMBLE.R"))
debug(predict.glmNIMBLE)
ipmKernelEvaluation(ipmOut, testData, testData$size, growthKern)
curModelMatrix
curModelMatrix
predNode
predNode
modSpecText
paramSamples
predOut <- apply(X = curModelMatrix, MARGIN = 1, FUN = function(curRow, paramSamples, modSpecText) {
browser()
paramSamples
}, paramSamples = paramSamples, modSpecText = modSpecText)
curRow
modeSpecText
modSpecText
as.list(paramSamples)
paramSamples
as.list(as.data.frame(paramSamples))
?environment
?eval
?parse
curRow
as.list(curRow)
eval(parse(modSpecText), envir = append(paramSamples, as.list(curRow))
)
eval(text = parse(modSpecText), envir = append(paramSamples, as.list(curRow)))
eval(parse(text = modSpecText), envir = append(paramSamples, as.list(curRow)))
parse(text = modSpecText)
append(paramSamples, as.list(curRow))
c(paramSamples, as.list(curRow)
)
paramSamples
# Import the source files
source(file.path(Sys.getenv("WORKSPACE_PAGAN"), "R", "mcmcInternals.R"))
source(file.path(Sys.getenv("WORKSPACE_PAGAN"), "R", "glmNIMBLE.R"))
source(file.path(Sys.getenv("WORKSPACE_PAGAN"), "R", "ipmNIMBLE.R"))
ipmKernelEvaluation(ipmOut, testData, testData$size, growthKern)
eval(parse(text = modSpecText), envir = c(paramSamples, as.list(curRow)))
predNode
# Import the source files
source(file.path(Sys.getenv("WORKSPACE_PAGAN"), "R", "mcmcInternals.R"))
source(file.path(Sys.getenv("WORKSPACE_PAGAN"), "R", "glmNIMBLE.R"))
source(file.path(Sys.getenv("WORKSPACE_PAGAN"), "R", "ipmNIMBLE.R"))
# Import the source files
source(file.path(Sys.getenv("WORKSPACE_PAGAN"), "R", "mcmcInternals.R"))
source(file.path(Sys.getenv("WORKSPACE_PAGAN"), "R", "glmNIMBLE.R"))
source(file.path(Sys.getenv("WORKSPACE_PAGAN"), "R", "ipmNIMBLE.R"))
ipmKernelEvaluation(ipmOut, testData, testData$size, growthKern)
modSpecText
predNode
attr(predNode, "linkFunction")
attr(predNode, "linkFunafn")
errorFamilies()
unique(unlist(errorFamilies()))
?predict
?predict.glm
# Import the source files
source(file.path(Sys.getenv("WORKSPACE_PAGAN"), "R", "mcmcInternals.R"))
source(file.path(Sys.getenv("WORKSPACE_PAGAN"), "R", "glmNIMBLE.R"))
source(file.path(Sys.getenv("WORKSPACE_PAGAN"), "R", "ipmNIMBLE.R"))
ipmKernelEvaluation(ipmOut, testData, testData$size, growthKern)
predOut <- t(apply(X = curModelMatrix, MARGIN = 1, FUN = function(curRow, paramSamples, modSpecText, inType, linkFunc) {
# Evaluate the model using the current parameter and covarite values
preds <- eval(parse(text = modSpecText), envir = c(paramSamples, as.list(curRow)))
if(inType == "response") {
preds <- applyInverseLink(preds, linkFunc)
}
}, paramSamples = as.list(paramSamples), modSpecText = modSpecText, inType = inType, linkFunc = linkFunc))
apply(X = curModelMatrix, MARGIN = 1, FUN = function(curRow, paramSamples, modSpecText, inType, linkFunc) {
# Evaluate the model using the current parameter and covarite values
preds <- eval(parse(text = modSpecText), envir = c(paramSamples, as.list(curRow)))
if(inType == "response") {
preds <- applyInverseLink(preds, linkFunc)
}
}, paramSamples = as.list(paramSamples), modSpecText = modSpecText, inType = inType, linkFunc = linkFunc)
predOut <- t(apply(X = curModelMatrix, MARGIN = 1, FUN = function(curRow, paramSamples, modSpecText, inType, linkFunc) {
browser()
# Evaluate the model using the current parameter and covarite values
preds <- eval(parse(text = modSpecText), envir = c(paramSamples, as.list(curRow)))
if(inType == "response") {
preds <- applyInverseLink(preds, linkFunc)
}
}, paramSamples = as.list(paramSamples), modSpecText = modSpecText, inType = inType, linkFunc = linkFunc))
preds
linkFunc
inType
type
# Retrieve the type of prediction to make
inType <- tryCatch(as.character(type), error = function(err) {
stop("error encountered processing prediction: invalid prediction type")
})
inType
# Import the source files
source(file.path(Sys.getenv("WORKSPACE_PAGAN"), "R", "mcmcInternals.R"))
source(file.path(Sys.getenv("WORKSPACE_PAGAN"), "R", "glmNIMBLE.R"))
source(file.path(Sys.getenv("WORKSPACE_PAGAN"), "R", "ipmNIMBLE.R"))
ipmKernelEvaluation(ipmOut, testData, testData$size, growthKern)
predOut <- t(apply(X = curModelMatrix, MARGIN = 1, FUN = function(curRow, paramSamples, modSpecText, inType, linkFunc) {
browser()
# Evaluate the model using the current parameter and covarite values
preds <- eval(parse(text = modSpecText), envir = c(paramSamples, as.list(curRow)))
if(inType == "response") {
preds <- applyInverseLink(preds, linkFunc)
}
}, paramSamples = as.list(paramSamples), modSpecText = modSpecText, inType = inType, linkFunc = linkFunc))
preds
preds
# Import the source files
source(file.path(Sys.getenv("WORKSPACE_PAGAN"), "R", "mcmcInternals.R"))
source(file.path(Sys.getenv("WORKSPACE_PAGAN"), "R", "glmNIMBLE.R"))
source(file.path(Sys.getenv("WORKSPACE_PAGAN"), "R", "ipmNIMBLE.R"))
ipmKernelEvaluation(ipmOut, testData, testData$size, growthKern)
predOut <- t(apply(X = curModelMatrix, MARGIN = 1, FUN = function(curRow, paramSamples, modSpecText, inType, linkFunc) {
# Evaluate the model using the current parameter and covarite values
preds <- eval(parse(text = modSpecText), envir = c(paramSamples, as.list(curRow)))
if(inType == "response") {
preds <- applyInverseLink(preds, linkFunc)
}
}, paramSamples = as.list(paramSamples), modSpecText = modSpecText, inType = inType, linkFunc = linkFunc))
predOut
# Import the source files
source(file.path(Sys.getenv("WORKSPACE_PAGAN"), "R", "mcmcInternals.R"))
source(file.path(Sys.getenv("WORKSPACE_PAGAN"), "R", "glmNIMBLE.R"))
source(file.path(Sys.getenv("WORKSPACE_PAGAN"), "R", "ipmNIMBLE.R"))
ipmKernelEvaluation(ipmOut, testData, testData$size, growthKern)
dim(predOut)
row(curModelMatrix)
curModelMatrix
dimnames(predOut)
inGLM$parameterSummary
t(apply(X = predOut, MARGIN = 1, FUN = function(curRow) {
setNames(
c(mean(curRow), median(curRow), sd(curRow), quartile(curRow, c(0.025, 0.975))),
c("Mean", "Median", "St.Dev.", "95%CI_low", "95%CI_upp")
)
}))
t(apply(X = predOut, MARGIN = 1, FUN = function(curRow) {
setNames(
c(mean(curRow), median(curRow), sd(curRow), quantile(curRow, c(0.025, 0.975))),
c("Mean", "Median", "St.Dev.", "95%CI_low", "95%CI_upp")
)
}))
# Import the source files
source(file.path(Sys.getenv("WORKSPACE_PAGAN"), "R", "mcmcInternals.R"))
source(file.path(Sys.getenv("WORKSPACE_PAGAN"), "R", "glmNIMBLE.R"))
source(file.path(Sys.getenv("WORKSPACE_PAGAN"), "R", "ipmNIMBLE.R"))
ipmKernelEvaluation(ipmOut, testData, testData$size, growthKern)
vitalPreds
names(vitalPreds)
vitalPreds <- setNames(lapply(X = inIPMOb, FUN = function(curVitalOb, inputData) {
predict.glmNIMBLE(curVitalOb, inputData, "response")$predictionMatrix
}, inputData = inputData), vitalRateNames)
sapply(X = 1:nrow(inputData), FUN = function(curRowIndex, mappingValues, kernelFunction, vitalPreds) {
# Retrieve the predictions for the vital rates at the current prediction row
curRowPreds <- t(sapply(X = names(vitalPreds), FUN = function(curVitalNames, curRowIndex, vitalPreds) {
vitalPreds[[curVitalNames]][curRowIndex, ]
}, curRowIndex = curRowIndex, vitalPreds = vitalPreds))
colnames(curRowPreds) <- names(vitalPreds)
browser()
}, mappingValues = mappingValues, kernelFunction = kernelFunction, vitalPreds = vitalPreds)
length(vitalPreds)
sapply(X = 1:nrow(inputData), FUN = function(curRowIndex, mappingValues, kernelFunction, vitalPreds) {
# Retrieve the predictions for the vital rates at the current prediction row
curRowPreds <- t(sapply(X = names(vitalPreds), FUN = function(curVitalNames, curRowIndex, vitalPreds) {
browser()
vitalPreds[[curVitalNames]][curRowIndex, ]
}, curRowIndex = curRowIndex, vitalPreds = vitalPreds))
colnames(curRowPreds) <- names(vitalPreds)
browser()
}, mappingValues = mappingValues, kernelFunction = kernelFunction, vitalPreds = vitalPreds
)
vitalPreds[[curVitalNames]]
vitalPreds[[curVitalNames]][curRowIndex, ]
sapply(X = 1:nrow(inputData), FUN = function(curRowIndex, mappingValues, kernelFunction, vitalPreds) {
# Retrieve the predictions for the vital rates at the current prediction row
curRowPreds <- t(sapply(X = names(vitalPreds), FUN = function(curVitalNames, curRowIndex, vitalPreds) {
vitalPreds[[curVitalNames]][curRowIndex, ]
}, curRowIndex = curRowIndex, vitalPreds = vitalPreds))
browser()
colnames(curRowPreds) <- names(vitalPreds)
}, mappingValues = mappingValues, kernelFunction = kernelFunction, vitalPreds = vitalPreds)
curRowPreds
curRowPreds <- sapply(X = names(vitalPreds), FUN = function(curVitalNames, curRowIndex, vitalPreds) {
vitalPreds[[curVitalNames]][curRowIndex, ]
}, curRowIndex = curRowIndex, vitalPreds = vitalPreds)
curRowPreds
colnames(curRowPreds) <- names(vitalPreds)
source(file.path(Sys.getenv("WORKSPACE_PAGAN"), "R", "ipmNIMBLE.R"))
ipmKernelEvaluation(ipmOut, testData, testData$size, growthKern)
curRowPreds
source(file.path(Sys.getenv("WORKSPACE_PAGAN"), "R", "ipmNIMBLE.R"))
ipmKernelEvaluation(ipmOut, testData, testData$size, growthKern)
sapply(X = mappingValues, FUN = function(curMapVal, curRowPreds, kernelFunction) {
sum(do.call(kernelFunction, append(list(x = curMapVal), curRowPreds)))
}, curRowPreds = as.list(as.data.frame(curRowPreds)), kernelFunction = kernelFunction)
outMat <- t(sapply(X = 1:nrow(inputData), FUN = function(curRowIndex, mappingValues, kernelFunction, vitalPreds) {
# Retrieve the predictions for the vital rates at the current prediction row
curRowPreds <- sapply(X = names(vitalPreds), FUN = function(curVitalNames, curRowIndex, vitalPreds) {
vitalPreds[[curVitalNames]][curRowIndex, ]
}, curRowIndex = curRowIndex, vitalPreds = vitalPreds)
colnames(curRowPreds) <- names(vitalPreds)
# Call the kernel with the current mapping value and the vector of potential vital rates
sapply(X = mappingValues, FUN = function(curMapVal, curRowPreds, kernelFunction) {
sum(do.call(kernelFunction, append(list(x = curMapVal), curRowPreds)))
}, curRowPreds = as.list(as.data.frame(curRowPreds)), kernelFunction = kernelFunction)
}, mappingValues = mappingValues, kernelFunction = kernelFunction, vitalPreds = vitalPred))
outMat <- t(sapply(X = 1:nrow(inputData), FUN = function(curRowIndex, mappingValues, kernelFunction, vitalPreds) {
# Retrieve the predictions for the vital rates at the current prediction row
curRowPreds <- sapply(X = names(vitalPreds), FUN = function(curVitalNames, curRowIndex, vitalPreds) {
vitalPreds[[curVitalNames]][curRowIndex, ]
}, curRowIndex = curRowIndex, vitalPreds = vitalPreds)
colnames(curRowPreds) <- names(vitalPreds)
# Call the kernel with the current mapping value and the vector of potential vital rates
sapply(X = mappingValues, FUN = function(curMapVal, curRowPreds, kernelFunction) {
sum(do.call(kernelFunction, append(list(x = curMapVal), curRowPreds)))
}, curRowPreds = as.list(as.data.frame(curRowPreds)), kernelFunction = kernelFunction)
}, mappingValues = mappingValues, kernelFunction = kernelFunction, vitalPreds = vitalPreds))
dimnames(outMat) <- c(paste("dataRow", 1:nrow(inputData), sep = ""), paste("mappedValue", 1:length(mappingValues), sep = ""))
dimnames(outMat) <- list(paste("dataRow", 1:nrow(inputData), sep = ""), paste("mappedValue", 1:length(mappingValues), sep = ""))
outMat
# Evaluate the growth kernel
growthKern <- function(x, growth, ...) {
dnorm(x, growth, 10.0)
}
# Import the source files
source(file.path(Sys.getenv("WORKSPACE_PAGAN"), "R", "mcmcInternals.R"))
source(file.path(Sys.getenv("WORKSPACE_PAGAN"), "R", "glmNIMBLE.R"))
source(file.path(Sys.getenv("WORKSPACE_PAGAN"), "R", "ipmNIMBLE.R"))
# Evaluate the growth kernel
growthKern <- function(x, growth, ...) {
dnorm(x, growth, 10.0)
}
growthMat <- ipmKernelEvaluation(ipmOut, testData, testData$size, growthKern)
growthMat
image(growthMat)
# Evaluate the growth/survival kernel
growthSurvKern <- function(x, growth, surv, ...) {
dnorm(x, growth, 10.0) * surv
}
growthSurvMat <- ipmKernelEvaluation(ipmOut, testData, testData$size, growthSurvKern)
image(growthSurvMat)
# Evaluate the fecundity kernel
fecKern <- function(x, fec, ...) {
dnorm(x, fec, 10.0)
}
fecMat <- ipmKernelEvaluation(ipmOut, testData, testData$size, fecKern)
image(fecMat)
# Evaluate the full kernel
fullKern <- function(x, growth, surv, fec, ...) {
dnorm(x, growth, 10.0) * surv + dnorm(x, fec, 10.0)
}
fullMat <- ipmKernelEvaluation(ipmOut, testData, testData$size, fullKern)
image(fullMat)
?image
image.plot(growthMat)
# Import some test data
testData <- read.csv("https://cmerow.github.io/RDataScience/21_assets/Exercises/Intro_to_IPMs_Exercises_Data.csv")
head(testData)
# Run the IPM
ipmOut <- ipmNIMBLE(inputData = testData, mcmcParams = mcmcParams,
# Define the survival sub-model
surv.modelFormula = cbind(surv, 1 - surv) ~ size, surv.errorFamily = binomial, surv.inputData = testData[!is.na(testData$surv) & !is.na(testData$size), ],
# Define the growth sub-model
growth.modelFormula = sizeNext ~ size, growth.inputData = testData[!is.na(testData$sizeNext) & !is.na(testData$size), ],
# Define the fecundity sub-model
fec.modelFormula = fec.seed ~ size, fec.errorFamily = poisson, fec.inputData = testData[!is.na(testData$fec.seed) & !is.na(testData$size), ]
)
library(nimble)
library(DHARMa)
library(ggplot2)
# Import the source files
source(file.path(Sys.getenv("WORKSPACE_PAGAN"), "R", "mcmcInternals.R"))
source(file.path(Sys.getenv("WORKSPACE_PAGAN"), "R", "glmNIMBLE.R"))
source(file.path(Sys.getenv("WORKSPACE_PAGAN"), "R", "ipmNIMBLE.R"))
# Define the MCMC parameter
mcmcParams <- list(
numRuns = 1000,
numChains = 4,
numBurnIn = 500,
thinDensity = 1,
predictThinDensity = 1
)
# Import some test data
testData <- read.csv("https://cmerow.github.io/RDataScience/21_assets/Exercises/Intro_to_IPMs_Exercises_Data.csv")
# Run the IPM
ipmOut <- ipmNIMBLE(inputData = testData, mcmcParams = mcmcParams,
# Define the survival sub-model
surv.modelFormula = cbind(surv, 1 - surv) ~ size, surv.errorFamily = binomial, surv.inputData = testData[!is.na(testData$surv) & !is.na(testData$size), ],
# Define the growth sub-model
growth.modelFormula = sizeNext ~ size, growth.inputData = testData[!is.na(testData$sizeNext) & !is.na(testData$size), ],
# Define the fecundity sub-model
fec.modelFormula = fec.seed ~ size, fec.errorFamily = poisson, fec.inputData = testData[!is.na(testData$fec.seed) & !is.na(testData$size), ]
)
names(ipmOut)
# Plot the residual test of the sub-models
plot(ipmOut$surv$DHARMaResiduals)
plot(ipmOut$growth$DHARMaResiduals)
plot(ipmOut$fec$DHARMaResiduals)
# Plot the regression coefficients associated with the sub-models
ipmOut$surv$parameterFigure
ipmOut$growth$parameterFigure
# Create some test data to evaluate the kernel on
testData <- data.frame(size = seq(0.0, 10.0, 0.5))
testData
# Create some test data to evaluate the kernel on
testData <- data.frame(size = seq(0.0, 10.0, 0.5))
# Evaluate the growth kernel
growthKern <- function(x, growth, ...) {
dnorm(x, growth, 10.0)
}
growthMat <- ipmKernelEvaluation(ipmOut, testData, testData$size, growthKern)
image(growthMat)
# Evaluate the growth/survival kernel
growthSurvKern <- function(x, growth, surv, ...) {
dnorm(x, growth, 10.0) * surv
}
growthSurvMat <- ipmKernelEvaluation(ipmOut, testData, testData$size, growthSurvKern)
image(growthSurvMat)
# Evaluate the fecundity kernel
fecKern <- function(x, fec, ...) {
dnorm(x, fec, 10.0)
}
fecMat <- ipmKernelEvaluation(ipmOut, testData, testData$size, fecKern)
image(fecMat)
# Evaluate the full kernel
fullKern <- function(x, growth, surv, fec, ...) {
dnorm(x, growth, 10.0) * surv + dnorm(x, fec, 10.0)
}
fullMat <- ipmKernelEvaluation(ipmOut, testData, testData$size, fullKern)
image(fullMat)
# Import some test data
testData <- read.csv("https://cmerow.github.io/RDataScience/21_assets/Exercises/Intro_to_IPMs_Exercises_Data.csv")
library(nimble)
library(DHARMa)
library(ggplot2)
# Import the source files
source(file.path(Sys.getenv("WORKSPACE_PAGAN"), "R", "mcmcInternals.R"))
source(file.path(Sys.getenv("WORKSPACE_PAGAN"), "R", "glmNIMBLE.R"))
source(file.path(Sys.getenv("WORKSPACE_PAGAN"), "R", "ipmNIMBLE.R"))
# Define the MCMC parameter
mcmcParams <- list(
numRuns = 1000,
numChains = 4,
numBurnIn = 500,
thinDensity = 1,
predictThinDensity = 1
)
# Run the IPM
ipmOut <- ipmNIMBLE(inputData = testData, mcmcParams = mcmcParams,
# Define the survival sub-model
surv.modelFormula = cbind(surv, 1 - surv) ~ size, surv.errorFamily = binomial, surv.inputData = testData[!is.na(testData$surv) & !is.na(testData$size), ],
# Define the growth sub-model
growth.modelFormula = sizeNext ~ size, growth.inputData = testData[!is.na(testData$sizeNext) & !is.na(testData$size), ],
# Define the fecundity sub-model
fec.modelFormula = fec.seed ~ size, fec.errorFamily = poisson, fec.inputData = testData[!is.na(testData$fec.seed) & !is.na(testData$size), ]
)
# Plot the residual test of the sub-models
plot(ipmOut$surv$DHARMaResiduals)
plot(ipmOut$growth$DHARMaResiduals)
plot(ipmOut$fec$DHARMaResiduals)
# Plot the regression coefficients associated with the sub-models
ipmOut$surv$parameterFigure
ipmOut$growth$parameterFigure
ipmOut$fec$parameterFigure
# Evaluate the growth kernel
growthKern <- function(x, growth, ...) {
dnorm(x, growth, 10.0)
}
# Create some test data to evaluate the kernel on
testData <- data.frame(size = seq(0.0, 10.0, 0.5))
growthMat <- ipmKernelEvaluation(ipmOut, testData, testData$size, growthKern)
image(growthMat)
# Create some test data to evaluate the kernel on
testData <- data.frame(size = seq(0.0, 10.0, length.out = 100))
growthMat <- ipmKernelEvaluation(ipmOut, testData, testData$size, growthKern)
image(growthMat)
# Evaluate the growth/survival kernel
growthSurvKern <- function(x, growth, surv, ...) {
dnorm(x, growth, 10.0) * surv
}
growthSurvMat <- ipmKernelEvaluation(ipmOut, testData, testData$size, growthSurvKern)
image(growthSurvMat)
# Evaluate the fecundity kernel
fecKern <- function(x, fec, ...) {
dnorm(x, fec, 10.0)
}
fecMat <- ipmKernelEvaluation(ipmOut, testData, testData$size, fecKern)
image(fecMat)
# Evaluate the full kernel
fullKern <- function(x, growth, surv, fec, ...) {
dnorm(x, growth, 10.0) * surv + dnorm(x, fec, 10.0)
}
fullMat <- ipmKernelEvaluation(ipmOut, testData, testData$size, fullKern)
image(fullMat)
